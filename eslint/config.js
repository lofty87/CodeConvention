module.exports = {
  root: true,
  env: {
    es6: true,
    browser: true,
  },
  globals: {
    Atomics: 'readonly',
    SharedArrayBuffer: 'readonly',
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2018,
    ecmaFeatures: { jsx: true },
    sourceType: 'module',
    project: './tsconfig.json',
  },
  settings: {
    react: { version: 'detect' },
  },
  plugins: [
    '@typescript-eslint',
    'import',
    'jsx-a11y',
    'react',
    'react-hooks',
  ],
  rules: {
    // ! Core Rules
    'array-bracket-newline': [ 'error', 'consistent' ],
    'array-bracket-spacing': [ 'error', 'always' ],
    'array-callback-return': [ 'error', { allowImplicit: true } ],
    'array-element-newline': [ 'error', 'consistent' ],
    'arrow-body-style': 'off',
    'arrow-parens': [ 'error', 'always' ],
    'arrow-spacing': 'error',
    'block-scoped-var': 'error',
    'block-spacing': [ 'error', 'always' ],
    'brace-style': [ 'error', 'stroustrup', { allowSingleLine: true } ],
    'camelcase': 'off',
    'comma-spacing': [ 'error', { before: false, after: true } ],
    'comma-style': [ 'error', 'last' ],
    'computed-property-spacing': [ 'error', 'never', { enforceForClassMembers: true } ],
    'consistent-return': [ 'error', { treatUndefinedAsUnspecified: false } ],
    'constructor-super': 'error',
    'curly': [ 'error', 'all' ],
    'default-case': 'off',
    'dot-location': [ 'error', 'property' ],
    'eol-last': [ 'error', 'always' ],
    'eqeqeq': [ 'error', 'always' ],
    'for-direction': 'error',
    'function-call-argument-newline': [ 'error', 'consistent' ],
    'function-paren-newline': [ 'error', 'multiline' ],
    'func-call-spacing': [ 'error', 'never' ],
    'func-names': 'off',
    'func-style': [ 'error', 'declaration', { allowArrowFunctions: true } ],
    'generator-star-spacing': [ 'error', { before: false, after: true } ],
    'getter-return': [ 'error', { allowImplicit: true } ],
    'global-require': 'off',
    'indent': [ 'error', 2, {
      ArrayExpression: 'first',
      CallExpression: { arguments: 'first' },
      ImportDeclaration: 'first',
      MemberExpression: 0,
      ObjectExpression: 'first',
      SwitchCase: 1,
      VariableDeclarator: 'first',
      flatTernaryExpressions: true,
      offsetTernaryExpressions: false,
      outerIIFEBody: 1,
    } ],
    'jsx-quotes': [ 'error', 'prefer-double' ],
    'keyword-spacing': [ 'error', { before: true, after: true } ],
    'key-spacing': [ 'error', {
      beforeColon: false,
      afterColon: true,
      mode: 'strict',
      align: 'colon',
    } ],
    'linebreak-style': 'off',
    'max-classes-per-file': 'off',
    'max-nested-callbacks': 'off',
    'multiline-ternary': [ 'error', 'always-multiline' ],
    'newline-per-chained-call': 'off',
    'new-cap': 'off',
    'new-parens': [ 'error', 'always' ],
    'nonblock-statement-body-position': [ 'error', 'below' ],
    'no-alert': 'off',
    'no-class-assign': 'error',
    'no-cond-assign': [ 'error', 'always' ],
    'no-confusing-arrow': 'error',
    'no-console': 'off',
    'no-constant-condition': [ 'error', { checkLoops: false } ],
    'no-const-assign': 'error',
    'no-dupe-args': 'error',
    'no-dupe-class-members': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-empty': [ 'error', { allowEmptyCatch: true } ],
    'no-eq-null': 'error',
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-boolean-cast': 'error',
    'no-extra-label': 'error',
    'no-extra-semi': 'error',
    'no-fallthrough': 'error',
    'no-floating-decimal': 'error',
    'no-func-assign': 'error',
    'no-global-assign': 'error',
    'no-import-assign': 'error',
    'no-inner-declarations': [ 'error', 'both' ],
    'no-invalid-regexp': [ 'error', { allowConstructorFlags: [ 'u', 'y' ] } ],
    'no-multi-spaces': 'error',
    'no-multi-str': 'error',
    'no-new-func': 'error',
    'no-param-reassign': 'off',
    'no-plusplus': 'off',
    'no-redeclare': 'error',
    'no-return-assign': [ 'error', 'always' ],
    'no-return-await': 'off',
    'no-self-assign': [ 'error', { props: false } ],
    'no-self-compare': 'error',
    'no-shadow': 'off',
    'no-shadow-restricted-names': 'error',
    'no-tabs': 'error',
    'no-template-curly-in-string': 'error',
    'no-this-before-super': 'error',
    'no-trailing-spaces': 'error',
    'no-underscore-dangle': 'off',
    'no-unexpected-multiline': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unneeded-ternary': [ 'error', { defaultAssignment: false } ],
    'no-unreachable': 'error',
    'no-unsafe-finally': 'error',
    'no-unsafe-negation': 'error',
    'no-unused-vars': 'off',
    'no-useless-concat': 'error',
    'no-useless-escape': 'off',
    'no-useless-rename': 'error',
    'no-use-before-define': 'error',
    'no-var': 'error',
    'no-whitespace-before-property': 'error',
    'no-with': 'error',
    'object-curly-newline': [ 'error', { consistent: true } ],
    'object-curly-spacing': [ 'error', 'always' ],
    'object-property-newline': 'off',
    'object-shorthand': [ 'error', 'consistent' ],
    'operator-linebreak': [ 'error', 'after', { overrides: { '?': 'before', ':': 'before' } } ],
    'padded-blocks': [ 'error', 'never' ],
    'padding-line-between-statements': [ 'error',
      { blankLine: 'always', prev: 'directive', next: '*' },
      { blankLine: 'any', prev: 'directive', next: 'directive' },
    ],
    'prefer-const': 'error',
    'prefer-destructuring': 'off',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    'quotes': [ 'error', 'single', { allowTemplateLiterals: true } ],
    'quote-props': [ 'error', 'consistent-as-needed' ],
    'require-await': 'error',
    'rest-spread-spacing': [ 'error', 'never' ],
    'semi': [ 'error', 'always' ],
    'semi-spacing': [ 'error', { before: false, after: true } ],
    'semi-style': [ 'error', 'last' ],
    'sort-imports': [ 'error', {
      ignoreCase: false,
      ignoreDeclarationSort: true,
      ignoreMemberSort: false,
    } ],
    'spaced-comment': [ 'error', 'always', {
      exceptions: [ '/', '!', '-', '*', '<' ],
      markers: [ 'global', '/', '!', '-', '*', '<', '!<' ],
    } ],
    'space-before-blocks': [ 'error', 'always' ],
    'space-before-function-paren': [ 'error', {
      anonymous: 'never',
      named: 'never',
      asyncArrow: 'always',
    } ],
    'space-infix-ops': 'error',
    'space-in-parens': [ 'error', 'never' ],
    'space-unary-ops': [ 'error', { words: true, nonwords: false } ],
    'switch-colon-spacing': [ 'error', { before: false, after: true } ],
    'template-curly-spacing': [ 'error', 'never' ],
    'template-tag-spacing': [ 'error', 'never' ],
    'vars-on-top': 'error',
    'yield-star-spacing': [ 'error', { before: false, after: true } ],
    
    // ! Import Rules
    'import/default': 'error',
    'import/export': 'error',
    'import/extensions': 'off',
    'import/first': 'error',
    'import/named': 'off',
    'import/newline-after-import': 'error',
    'import/no-absolute-path': 'error',
    'import/no-anonymous-default-export': 'off',
    'import/no-cycle': 'off',
    'import/no-duplicates': 'error',
    'import/no-dynamic-require': 'off',
    'import/no-extraneous-dependencies': 'off',
    'import/no-mutable-exports': 'error',
    'import/no-named-as-default': 'error',
    'import/no-named-as-default-member': 'off',
    'import/no-self-import': 'error',
    'import/no-unassigned-import': 'off',
    'import/no-useless-path-segments': 'error',
    'import/prefer-default-export': 'off',
    'import/order': [ 'error', {
      groups: [
        'builtin',
        [ 'external', 'internal' ],
        'parent',
        [ 'index', 'sibling' ],
        'object',
        'type',
      ],
      pathGroups: [
        { pattern: 'expo', group: 'external', position: 'before' },
        { pattern: 'expo*', group: 'external', position: 'before' },
        { pattern: 'react', group: 'external', position: 'before' },
        { pattern: 'react-dom', group: 'external', position: 'before' },
        { pattern: 'react-native', group: 'external', position: 'before' },
        { pattern: 'react*', group: 'external', position: 'before' },
        { pattern: '@react*', group: 'external', position: 'before' },
        { pattern: '{@components,@components/**/*}', group: 'external', position: 'after' },
        { pattern: '{@screens,@screens/**/*}', group: 'external', position: 'after' },
        { pattern: '{@contexts,@contexts/**/*}', group: 'external', position: 'after' },
        { pattern: '{@constants,@constants/**/*}', group: 'external', position: 'after' },
        { pattern: '{@locales,@locales/**/*}', group: 'external', position: 'after' },
        { pattern: '{@lib,@lib/**/*}', group: 'external', position: 'after' },
        { pattern: '{@storage,@storage/**/*}', group: 'external', position: 'after' },
        { pattern: '{@stores,@stores/**/*}', group: 'external', position: 'after' },
        { pattern: '{@analytics,@analytics/**/*}', group: 'external', position: 'after' },
        { pattern: '{src,src/**/*}', group: 'external', position: 'after' },
      ],
      pathGroupsExcludedImportTypes: [],
      alphabetize: { order: 'asc', caseInsensitive: false },
      warnOnUnassignedImports: false,
      distinctGroup: false,
      'newlines-between': 'always',
    } ],
    
    // ! Typescript Rules
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/await-thenable': 'error',
    '@typescript-eslint/dot-notation': 'off',
    '@typescript-eslint/explicit-member-accessibility': 'off',
    '@typescript-eslint/lines-between-class-members': [ 'error', { exceptAfterOverload: true } ],
    '@typescript-eslint/member-ordering': 'error',
    '@typescript-eslint/method-signature-style': [ 'error', 'property' ],
    '@typescript-eslint/naming-convention': 'off',
    '@typescript-eslint/no-confusing-non-null-assertion': 'error',
    '@typescript-eslint/no-duplicate-enum-values': 'error',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-extra-non-null-assertion': 'error',
    '@typescript-eslint/no-inferrable-types': 'error',
    '@typescript-eslint/no-misused-new': 'error',
    '@typescript-eslint/no-misused-promises': [ 'error', {
      checksConditionals: true,
      checksVoidReturn: false,
      checksSpreads: true,
    } ],
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
    '@typescript-eslint/no-throw-literal': 'error',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/no-unnecessary-condition': [ 'error', { allowConstantLoopConditions: true } ],
    '@typescript-eslint/no-unnecessary-qualifier': 'error',
    '@typescript-eslint/no-unnecessary-type-arguments': 'error',
    '@typescript-eslint/no-unnecessary-type-assertion': 'error',
    '@typescript-eslint/no-unused-expressions': 'off',
    '@typescript-eslint/no-unused-vars': 'off',
    '@typescript-eslint/promise-function-async': 'off',
    '@typescript-eslint/restrict-plus-operands': 'error',
    '@typescript-eslint/sort-type-constituents': 'error',
    '@typescript-eslint/type-annotation-spacing': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    
    // ! JSX Rules
    'jsx-a11y/alt-text': 'error',
    'jsx-a11y/anchor-is-valid': 'off',
    'jsx-a11y/click-events-have-key-events': 'off',
    'jsx-a11y/heading-has-content': 'error',
    'jsx-a11y/html-has-lang': 'error',
    'jsx-a11y/iframe-has-title': 'error',
    'jsx-a11y/lang': 'error',
    'jsx-a11y/no-autofocus': 'error',
    'jsx-a11y/no-noninteractive-element-interactions': 'error',
    'jsx-a11y/no-redundant-roles': 'error',
    'jsx-a11y/no-static-element-interactions': 'off',
    
    // ! React Rules
    'react/button-has-type': 'error',
    'react/default-props-match-prop-types': 'error',
    'react/destructuring-assignment': 'error',
    'react/function-component-definition': [ 'error', {
      namedComponents: 'arrow-function',
      unnamedComponents: 'arrow-function',
    } ],
    'react/jsx-boolean-value': [ 'error', 'always' ],
    'react/jsx-child-element-spacing': 'error',
    'react/jsx-closing-bracket-location': [ 'error', 'line-aligned' ],
    'react/jsx-closing-tag-location': 'error',
    'react/jsx-curly-brace-presence': [ 'error', { props: 'never', children: 'never' } ],
    'react/jsx-curly-newline': [ 'error', { singleline: 'consistent', multiline: 'consistent' } ],
    'react/jsx-curly-spacing': [ 'error', { when: 'never', children: true } ],
    'react/jsx-equals-spacing': [ 'error', 'never' ],
    'react/jsx-filename-extension': [ 'error', { allow: 'always', extensions: [ '.jsx', '.tsx' ] } ],
    'react/jsx-first-prop-new-line': [ 'error', 'always' ],
    'react/jsx-fragments': 'error',
    'react/jsx-handler-names': 'off',
    'react/jsx-indent': [ 'error', 2, { checkAttributes: false, indentLogicalExpressions: false } ],
    'react/jsx-indent-props': [ 'error', 2 ],
    'react/jsx-key': 'error',
    'react/jsx-max-props-per-line': [ 'error', { maximum: 1, when: 'always' } ],
    'react/jsx-newline': [ 'error', { prevent: true, allowMultilines: false } ],
    'react/jsx-no-duplicate-props': 'error',
    'react/jsx-no-target-blank': [ 'error', { enforceDynamicLinks: 'always' } ],
    'react/jsx-no-useless-fragment': 'off',
    'react/jsx-one-expression-per-line': [ 'error', { allow: 'literal' } ],
    'react/jsx-pascal-case': 'off',
    'react/jsx-props-no-multi-spaces': 'error',
    'react/jsx-props-no-spreading': 'off',
    'react/jsx-sort-props': [ 'error', {
      callbacksLast: true,
      ignoreCase: false,
      multiline: 'ignore',
      noSortAlphabetically: false,
      shorthandLast: true,
      reservedFirst: [ 'key', 'ref' ],
    } ],
    'react/jsx-tag-spacing': [ 'error', {
      closingSlash: 'never',
      beforeSelfClosing: 'always',
      afterOpening: 'never',
      beforeClosing: 'never',
    } ],
    'react/jsx-uses-react': 'off',
    'react/jsx-uses-vars': 'off',
    'react/jsx-wrap-multilines': [ 'error', {
      declaration: 'parens-new-line',
      assignment: 'parens-new-line',
      return: 'parens-new-line',
      arrow: 'parens-new-line',
      condition: 'parens-new-line',
      logical: 'parens-new-line',
      prop: 'parens-new-line',
    } ],
    'react/no-access-state-in-setstate': 'error',
    'react/no-array-index-key': 'off',
    'react/no-children-prop': 'error',
    'react/no-danger-with-children': 'off',
    'react/no-danger': 'off',
    'react/no-deprecated': 'error',
    'react/no-did-mount-set-state': 'off',
    'react/no-did-update-set-state': 'off',
    'react/no-direct-mutation-state': 'error',
    'react/no-find-dom-node': 'error',
    'react/no-multi-comp': 'off',
    'react/no-redundant-should-component-update': 'error',
    'react/no-string-refs': 'error',
    'react/no-this-in-sfc': 'error',
    'react/no-typos': 'error',
    'react/no-unescaped-entities': 'off',
    'react/no-unknown-property': 'error',
    'react/no-will-update-set-state': 'error',
    'react/prefer-es6-class': [ 'error', 'always' ],
    'react/prop-types': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/require-render-return': 'error',
    'react/self-closing-comp': [ 'error', { component: true, html: false } ],
    'react/sort-default-props': 'error',
    'react/sort-prop-types': [ 'error', { ignoreCase: true, callbacksLast: true } ],
    'react/state-in-constructor': [ 'error', 'never' ],
    'react/style-prop-object': 'off',
    'react/void-dom-elements-no-children': 'error',
  },
};
